---
id: RFC7076
title:
- content: P6R's Secure Shell Public Key Subsystem
  format: text/plain
  type: main
link:
- content: https://www.rfc-editor.org/info/rfc7076
  type: src
type: standard
docid:
- id: RFC 7076
  type: IETF
  primary: true
- id: 10.17487/RFC7076
  type: DOI
docnumber: RFC7076
date:
- type: published
  value: 2013-11
contributor:
- person:
    name:
      given:
        forename:
        - language:
          - en
          script:
          - Latn
          initial: M
        formatted_initials:
          content: M.
          language:
          - en
          script:
          - Latn
      surname:
        content: Joseph
        language:
        - en
        script:
        - Latn
      completename:
        content: M. Joseph
        language:
        - en
        script:
        - Latn
  role:
  - type: author
- person:
    name:
      given:
        forename:
        - language:
          - en
          script:
          - Latn
          initial: J
        formatted_initials:
          content: J.
          language:
          - en
          script:
          - Latn
      surname:
        content: Susoy
        language:
        - en
        script:
        - Latn
      completename:
        content: J. Susoy
        language:
        - en
        script:
        - Latn
  role:
  - type: author
- organization:
    name:
    - content: RFC Series
  role:
  - type: authorizer
revdate: 2013-11
language:
- en
script:
- Latn
abstract:
- content: "<p>The Secure Shell (SSH) Public Key Subsystem protocol defines a key
    distribution protocol that is limited to provisioning an SSH server with a user's
    public keys. This document describes a new protocol that builds on the protocol
    defined in RFC 4819 to allow the provisioning of keys and certificates to a server
    using the SSH transport.</p><p>The new protocol allows the calling client to organize
    keys and certificates in different namespaces on a server. These namespaces can
    be used by the server to allow a client to configure any application running on
    the server (e.g., SSH, Key Management Interoperability Protocol (KMIP), Simple
    Network Management Protocol (SNMP)).</p><p>The new protocol provides a server-independent
    mechanism for clients to add public keys, remove public keys, add certificates,
    remove certificates, and list the current set of keys and certificates known by
    the server by namespace (e.g., list all public keys in the SSH namespace).</p><p>Rights
    to manage keys and certificates in a particular namespace are specific and limited
    to the authorized user and are defined as part of the server's implementation.
    The described protocol is backward compatible to version 2 defined by RFC 4819.</p>"
  language:
  - en
  script:
  - Latn
  format: text/html
series:
- title:
    content: RFC
    format: text/plain
  number: '7076'
keyword:
- content: key management
- content: certificate management
- content: security
